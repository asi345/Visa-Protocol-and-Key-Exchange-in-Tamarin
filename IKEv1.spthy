theory IKEv1
begin

/* IKEv1 protocol:
   A -> B : aenc_B{A}, aenc_B{N_A}, g^x  (N_A fresh nonce, x fresh)
   B -> A : aenc_A{B}, aenc_A{N_B}, g^y, HASH_B  (y fresh)
   A -> B : HASH_A
where:
   HASH_R = prf(<skID, g^x, g^y, A, B>)
   HASH_I = prf(<skID, g^y, g^x, B, A>)
   skID = prf(<h(<N_A, N_B>), A, B>)

     */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing

/*Define an abstract function prf with no additional algebraic properties
representing a "perfect" pseudo-random function. */
functions: prf/1


/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]



/* Question 7*/

/*----------------*/
/* Protocol rules */
/*----------------*/


rule Init_1:
   let gXI = 'g'^~xI
   in
   [ Fr(~xI),
     Fr(~nA),
     !Pk($B, pkB) ]                 
   -->
   [ Init_1($A, $B, ~xI, gXI, ~nA, pkB),
     Out(<aenc($A, pkB), aenc(~nA, pkB), gXI>) ]

rule Resp_1:
   let gYR = 'g'^~yR
       gXYR = gXI^~yR
       skID = prf(<h(<~nA, ~nB>), $A, $B>)
       kR = prf(<skID, gXYR>)
       hashB = prf(<skID, gYR, gXI, $B, $A>)
   in
   [ Fr(~yR),
     Fr(~nB),
     !Key($B, kB),
     !Pk($A, pkA),
     In(<aenc($A, pk(kB)), aenc(~nA, pk(kB)), gXI>) ]
   --[ RunningR($B, $A, kR) ]->
   [ Resp_1($B, $A, ~yR, gYR, gXI, ~nB, kB, pkA, skID, kR),
     Out(<hashB, aenc($B, pkA), aenc(~nB, pkA), gYR>) ]

rule Init_2:
   let gXYI = gYR^~xI
       skID = prf(<h(<~nA, ~nB>), $A, $B>)
       kI = prf(<skID, gXYI>)
       hashA = prf(<skID, gXI, gYR, $A, $B>)
       hashB = prf(<skID, gYR, gXI, $B, $A>)
   in
   [ Init_1($A, $B, ~xI, gXI, ~nA, pkB),
     !Key($A, kA),
     In(<hashB, aenc($B, pk(kA)), aenc(~nB, pk(kA)), gYR>) ]
   --[ SecretI($A, $B, kI),
       RunningI($A, $B, kI),
       CommitI($A, $B, kI),
       FinishedI($A) ]->
   [ Init_2($A, $B, ~xI, gXI, gYR, ~nA, kA, pkB, skID, kI),
     Out(hashA) ]

rule Resp_2:
   let hashA = prf(<skID, gXI, gYR, $A, $B>)
   in
   [ Resp_1($B, $A, ~yR, gYR, gXI, ~nB, kB, pkA, skID, kR),
     In(hashA) ]
   --[ SecretR($A, $B, kR),
       CommitR($B, $A, kR),
       FinishedR($B) ]->
   [ Resp_2($B, $A, ~yR, gYR, gXI, ~nB, kB, pkA, skID, kR) ]


/* ---------- */
/* Key Reveal */
/* ---------- */


rule Comp:
   [ !Key(A, k) ]
   --[ Compromised(A) ]->
   [ Out(k) ]


/* ---------- */
/* Restrictions */
/* ---------- */
/*
restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"
*/
/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"



/* Perfect Forward Secrecy:  (Question 8)
Please uncomment the following two lemmas for this question.
*/



lemma secrecy_PFS_R:
 " All A B k #i. 
    SecretR(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"



lemma secrecy_PFS_I:
 " All A B k #i. 
    SecretI(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"



end
